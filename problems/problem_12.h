#ifndef PROBLEM_12
#define PROBLEM_12
#include "problem.h"

/************************
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
************************/

namespace problem_12 {

    unsigned fac_count ( unsigned& n, unsigned d )
    {
        unsigned c = 0;

        while ( n >= d && n % d == 0 )
        {
            n /= d;
            ++c;
        }
        return c;
    }

    unsigned long divisor_count ( unsigned n )
    {
        // only checking if 2,3,5,7, and 11 are divisors
        if ( n % 2310 ) return 0;

        // checking primes < 20
        return (1 + fac_count(n,2)) *
                (1 + fac_count(n,3)) *
                (1 + fac_count(n,5)) *
                (1 + fac_count(n,7)) *
                (1 + fac_count(n,9)) *
                (1 + fac_count(n,11)) *
                (1 + fac_count(n,13)) *
                (1 + fac_count(n,17)) *
                (1 + fac_count(n,19));
    }

    unsigned long triangle_n ( unsigned n )
    {
        return (n + 1) * n / 2;
    }

    unsigned long solve ()
    {
        /***
        getting the smallest number with 500 factors
        http://www.cut-the-knot.org/blue/NumberOfFactors.shtml

        500 = 5 * 5 * 5 * 2 * 2
        so the smallest number with 500 divisors should be
        (2^4) * (3^4) * (5^4) * 7 * 11 = 62370000

        so the triangle number should be >= 62370000
        and should be a multiple of 2,3,5,7,11 (2310)

        t = (i + 1) * i / 2
        t ~= i^2 / 2
        i ~= sqrt(2t)
        i >= 11168
        ***/

        unsigned i = 11168;
        unsigned max = 1;
        unsigned c;
        unsigned long t;

        while ( ++i )
        {
            t = triangle_n(i);
            c = divisor_count(t);
            if ( c > max )
            {
                max = c;
                if ( max > 500 ) break;
            }
        }

        return t;
    }

    Problem p(12, solve);
}

#endif